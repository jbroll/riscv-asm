
immediate jimm20    31|19..12|20|30..21|x
immediate bimm12    31|7|30..25|11..8|x
immediate jimm12    31..20
immediate limm12    31..20
immediate simm12    31..25|11..7
immediate aimm12    31..20
immediate  imm20    31..12|xxxxxxxxxxxx
immediate shamt6    25..20                  unsigned
immediate  uimm5    19..15                  unsigned

opcode unimp                                        : 31..0=0
opcode beq     rs1 rs2 bimm12                       : 14..12=0 6..2=0x18 1..0=3       | { if { rs1 == rs2 } { pc += bimm12 } else { pc += size } }
alias beqz rs1 bimm12 -> beq rs1 x0 bimm12
opcode bne     rs1 rs2 bimm12                       : 14..12=1 6..2=0x18 1..0=3       | { if { rs1 != rs2 } { pc += bimm12 } else { pc += size } }
alias bnez rs1 bimm12 -> bne rs1 x0 bimm12
opcode blt     rs1 rs2 bimm12                       : 14..12=4 6..2=0x18 1..0=3       | { if { rs1 <  rs2 } { pc += bimm12 } else { pc += size } }
opcode bge     rs1 rs2 bimm12                       : 14..12=5 6..2=0x18 1..0=3       | { if { rs1 >= rs2 } { pc += bimm12 } else { pc += size } }
opcode bltu    rs1 rs2 bimm12                       : 14..12=6 6..2=0x18 1..0=3       | { if { unsigned(rs1) <  unsigned(rs2) } { pc += bimm12 } else { pc += size } }
opcode bgeu    rs1 rs2 bimm12                       : 14..12=7 6..2=0x18 1..0=3       | { if { unsigned(rs1) >= unsigned(rs2) } { pc += bimm12 } else { pc += size } }

opcode jalr     rd rs1 jimm12                       : 14..12=0 6..2=0x19 1..0=3       | { tmp = pc + size ; pc = rs1 + jimm12 ; rd = tmp }
alias  jalr        rs1 jimm12   -> jalr ra rs1 jimm12

opcode jal      rd jimm20                           :         6..2=0x1b 1..0=3        | { rd = pc + size ; pc += jimm20 }
alias  jal         jimm20       -> jal  ra jimm20

opcode lui     rd imm20                             :        6..2=0x0D 1..0=3         | { rd = signed(imm20, 32) }
opcode auipc   rd imm20                             :        6..2=0x05 1..0=3         | { rd = pc + imm20 }

opcode nop               : 11..7=0 19..15=0 31..20=0  14..12=0 6..2=0x04 1..0=3       | { } 
opcode addi    rd rs1 aimm12                        : 14..12=0 6..2=0x04 1..0=3       | { rd = rs1 + aimm12 }
alias li rd aimm12 -> addi rd x0 aimm12
alias nop -> addi x0 x0 0
opcode slli    rd rs1 shamt6              : 31..26=0  14..12=1 6..2=0x04 1..0=3       | { rd = rs1 << unsigned(shamt6) }
opcode slti    rd rs1 aimm12                        : 14..12=2 6..2=0x04 1..0=3       | { rd = rs1 < aimm12 ? 1 : 0 }
opcode sltiu   rd rs1 aimm12                        : 14..12=3 6..2=0x04 1..0=3       | { rd = unsigned(rs1) < unsigned(aimm12) ? 1 : 0 }
opcode xori    rd rs1 aimm12                        : 14..12=4 6..2=0x04 1..0=3       | { rd = rs1 ^ aimm12 }
opcode ori     rd rs1 aimm12                        : 14..12=6 6..2=0x04 1..0=3       | { rd = rs1 | aimm12 }
opcode andi    rd rs1 aimm12                        : 14..12=7 6..2=0x04 1..0=3       | { rd = rs1 & aimm12 }

opcode srli    rd rs1 shamt6              : 31..26=0  14..12=5 6..2=0x04 1..0=3       | { rd = (rs1 >> unsigned(shamt6)) & msk2(xlen-unsigned(shamt6)-1, 0) }
opcode srai    rd rs1 shamt6              : 31..26=16 14..12=5 6..2=0x04 1..0=3       | { rd =  rs1 >> unsigned(shamt6) }

opcode add     rd rs1 rs2                 : 31..25=0  14..12=0 6..2=0x0C 1..0=3       | { rd = rs1 + rs2 }
alias mv rd rs  -> add rd x0 rs
opcode sub     rd rs1 rs2                 : 31..25=32 14..12=0 6..2=0x0C 1..0=3       | { rd = rs1 -  rs2 }
opcode sll     rd rs1 rs2                 : 31..25=0  14..12=1 6..2=0x0C 1..0=3       | { rd = rs1 << unsigned(rs2, xlen == 32 ? 4 : 5) }
opcode slt     rd rs1 rs2                 : 31..25=0  14..12=2 6..2=0x0C 1..0=3       | { rd = rs1 <  rs2 ? 1 : 0 }
opcode sltu    rd rs1 rs2                 : 31..25=0  14..12=3 6..2=0x0C 1..0=3       | { rd = unsigned(rs1) < unsigned(rs2) ? 1 : 0 }
opcode xor     rd rs1 rs2                 : 31..25=0  14..12=4 6..2=0x0C 1..0=3       | { rd = rs1 ^ rs2 }
opcode srl     rd rs1 rs2                 : 31..25=0  14..12=5 6..2=0x0C 1..0=3       | { 
    tmp = unsigned(rs2, xlen == 32 ? 4 : 5) ; 
    rd = (rs1 >> tmp) & msk2(xlen-tmp-1, 0) 
}
opcode sra     rd rs1 rs2                 : 31..25=32 14..12=5 6..2=0x0C 1..0=3       | { rd =  rs1 >> unsigned(rs2, xlen == 32 ? 4 : 5) }
opcode or      rd rs1 rs2                 : 31..25=0  14..12=6 6..2=0x0C 1..0=3       | { rd = rs1 | rs2 }
opcode and     rd rs1 rs2                 : 31..25=0  14..12=7 6..2=0x0C 1..0=3       | { rd = rs1 & rs2 }

opcode lb      rd rs1  limm12                       : 14..12=0 6..2=0x00 1..0=3       | { rd = ld_sbyte(rs1 + limm12) }
opcode lh      rd rs1  limm12                       : 14..12=1 6..2=0x00 1..0=3       | { rd = ld_shalf(rs1 + limm12) }
opcode lw      rd rs1  limm12                       : 14..12=2 6..2=0x00 1..0=3       | { rd = ld_sword(rs1 + limm12) }
opcode lbu     rd rs1  limm12                       : 14..12=4 6..2=0x00 1..0=3       | { rd = ld_ubyte(rs1 + limm12) }
opcode lhu     rd rs1  limm12                       : 14..12=5 6..2=0x00 1..0=3       | { rd = ld_uhalf(rs1 + limm12) }

opcode sb      rs2 rs1 simm12                       : 14..12=0 6..2=0x08 1..0=3       | { st_byte(rs1 + simm12, rs2) }
opcode sh      rs2 rs1 simm12                       : 14..12=1 6..2=0x08 1..0=3       | { st_half(rs1 + simm12, rs2) }
opcode sw      rs2 rs1 simm12                       : 14..12=2 6..2=0x08 1..0=3       | { st_word(rs1 + simm12, rs2) }

opcode fence   pred succ         : 31..28=0  19..15=0 14..12=0 11..7=0 6..2=0x03 1..0=3                    -> | { }
alias fence -> fence iorw iorw
opcode fence.tso                 : 31..28=8  27..24=3 23..20=3 19..15=0 14..12=0 11..7=0 6..2=0x03 1..0=3  -> | { }

opcode ecall             : 11..7=0 19..15=0 31..20=0x000 14..12=0 6..2=0x1C 1..0=3    | { 
    if { x17 != 93 } { 
        print "\tnknown ecall"
        exit 1 
    } else {
        if { x10 == 0 } {
            print "\tTest pass"
            exit 0
        } 
        print "\tTest Fail "  [expr x10 >> 1]
        exit 1
    }
}
opcode ebreak            : 11..7=0 19..15=0 31..20=0x001 14..12=0 6..2=0x1C 1..0=3

opcode uret              : 11..7=0 19..15=0 31..20=0x002 14..12=0 6..2=0x1C 1..0=3
opcode sret              : 11..7=0 19..15=0 31..20=0x102 14..12=0 6..2=0x1C 1..0=3
opcode mret              : 11..7=0 19..15=0 31..20=0x302 14..12=0 6..2=0x1C 1..0=3 | { pc = mepc }
opcode dret              : 11..7=0 19..15=0 31..20=0x7b2 14..12=0 6..2=0x1C 1..0=3
opcode sfence.vma rs1 rs2 : 11..7=0         31..25=0x09  14..12=0 6..2=0x1C 1..0=3
opcode wfi               : 11..7=0 19..15=0 31..20=0x105 14..12=0 6..2=0x1C 1..0=3
